{"version":3,"sources":["redux/actions.jsx","components/UserItem.jsx","components/UserList.jsx","components/UsersManagmentUI.jsx","components/DetailsCard.jsx","App.js","serviceWorker.js","redux/reducers.jsx","index.js"],"names":["addNewUser","data","type","payload","deleteUser","index","updateUser","id","name","grade","school","UserItem","Component","window","confirm","this","props","user","handleClick","e","preventDefault","history","push","pathname","state","detail","render","key","className","onClick","connect","users","dispatch","bindActionCreators","actions","withRouter","UserList","trItem","map","item","UsersManagmentUI","addUser","Math","max","o","DetailsCard","isEdit","selectedUserIndex","componentWillMount","findIndex","x","location","setState","editUser","prevState","editUserSubmit","nameInput","value","gradeInput","schoolInput","ref","defaultValue","to","App","path","exact","component","Boolean","hostname","match","initialState","allReducers","action","newBlankUser","filteredUserList","filter","console","log","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","createBrowserHistory","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d220a321.chunk.js","sourcesContent":["export const addNewUser = data => ({\r\n  type: 'ADD_USER',\r\n  payload: data,\r\n});\r\nexport const deleteUser = index => ({\r\n  type: 'DELETE_USER',\r\n  payload: index,\r\n});\r\nexport const updateUser = (id, name, grade, school) => ({\r\n  type: 'UPDATE_USER',\r\n  payload: {\r\n    id,\r\n    name,\r\n    grade,\r\n    school,\r\n  },\r\n});\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as actions from '../redux/actions';\r\n\r\nclass UserItem extends Component {\r\n  deleteUser = () => {\r\n    const r = window.confirm('Do you want to delete this item');\r\n    if (r === true) {\r\n      const { id } = this.props.user;\r\n      this.props.deleteUser(id);\r\n    }\r\n  };\r\n\r\n  handleClick = e => {\r\n    e.preventDefault();\r\n    this.props.history.push({\r\n      pathname: `/details/${this.props.user.id}`,\r\n      state: { detail: this.props.user },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, grade, school } = this.props.user;\r\n    return (\r\n      <tr key={this.props.index}>\r\n        <td>{name}</td>\r\n        <td>{grade}</td>\r\n        <td>{school}</td>\r\n        <td>\r\n          <i className=\"far fa-edit\" onClick={this.handleClick} />\r\n        </td>\r\n        <td>\r\n          <i className=\"fas fa-trash\" onClick={this.deleteUser} />\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  users: state.users,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      deleteUser: actions.deleteUser,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(UserItem));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport UserItem from './UserItem';\r\n\r\nclass UserList extends Component {\r\n  render() {\r\n    const trItem = this.props.users.map((item, index) => (\r\n      <UserItem key={index} user={item} index={index} />\r\n    ));\r\n    return <tbody>{trItem}</tbody>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  users: state.users,\r\n});\r\n\r\nexport default connect(mapStateToProps)(UserList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport UserList from './UserList.jsx';\r\nimport * as actions from '../redux/actions';\r\n\r\nclass UsersManagmentUI extends Component {\r\n  addNewUser = () => {\r\n    const { users, addUser } = this.props;\r\n    const data = {\r\n      id:\r\n        Math.max(\r\n          ...users.map(function(o) {\r\n            return o.id;\r\n          })\r\n        ) + 1,\r\n      name: '',\r\n      grade: 1,\r\n      school: '',\r\n    };\r\n    addUser(data);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row mt-3\">\r\n          <div className=\"col-lg-12\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header text-center font-weight-bold\">\r\n                Users Registry\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <table className=\"table table-hover text-center\">\r\n                  <thead className=\"thead-dark\">\r\n                    <tr>\r\n                      <th>Name</th>\r\n                      <th>Grade</th>\r\n                      <th>School</th>\r\n                      <th>Edit</th>\r\n                      <th>Delete</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <UserList />\r\n                </table>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-dark pull-left\"\r\n                  onClick={this.addNewUser}\r\n                >\r\n                  Add New\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  users: state.users,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      addUser: actions.addNewUser,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersManagmentUI);\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as actions from '../redux/actions';\r\n\r\nclass DetailsCard extends Component {\r\n  state = {\r\n    isEdit: false,\r\n    selectedUserIndex: null,\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    const index = this.props.users.findIndex(\r\n      x => x.id === this.props.location.state.detail.id\r\n    );\r\n    this.setState({ selectedUserIndex: index });\r\n  };\r\n\r\n  editUser = () => {\r\n    this.setState(prevState => ({\r\n      isEdit: !prevState.isEdit,\r\n    }));\r\n  };\r\n\r\n  editUserSubmit = () => {\r\n    this.props.updateUser(\r\n      this.props.users[this.state.selectedUserIndex].id,\r\n      this.nameInput.value,\r\n      this.gradeInput.value,\r\n      this.schoolInput.value\r\n    );\r\n\r\n    this.setState(prevState => ({\r\n      isEdit: !prevState.isEdit,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { name, grade, school } = this.props.users[\r\n      this.state.selectedUserIndex\r\n    ];\r\n\r\n    return (\r\n      <div className=\"DetailsCard container-fluid text-center\">\r\n        <div className=\"row mt-3\">\r\n          <div className=\"col-lg-12\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header font-weight-bold\">User details</div>\r\n              <div className=\"card-body\">\r\n                <table className=\"table table-hover\">\r\n                  <thead className=\"thead-dark\">\r\n                    <tr>\r\n                      <th>Name</th>\r\n                      <th>Grade</th>\r\n                      <th>School</th>\r\n                      <th>Change Data</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {this.state.isEdit ? (\r\n                      <tr className=\"bg-warning\" key={this.props.index}>\r\n                        <td>\r\n                          <input\r\n                            ref={nameInput => (this.nameInput = nameInput)}\r\n                            defaultValue={name}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            defaultValue={grade}\r\n                            ref={gradeInput => (this.gradeInput = gradeInput)}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            ref={schoolInput =>\r\n                              (this.schoolInput = schoolInput)\r\n                            }\r\n                            defaultValue={school}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <i\r\n                            className=\"far fa-save\"\r\n                            onClick={this.editUserSubmit}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    ) : (\r\n                      <tr key={this.props.index}>\r\n                        <td>{name}</td>\r\n                        <td>{grade}</td>\r\n                        <td>{school}</td>\r\n                        <td>\r\n                          <i className=\"far fa-edit\" onClick={this.editUser} />\r\n                        </td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n                <Link to=\"/\">\r\n                  <button type=\"button\" className=\"btn btn-dark\">\r\n                    Back\r\n                  </button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  users: state.users,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      updateUser: actions.updateUser,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailsCard);\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport UsersManagmentUI from './components/UsersManagmentUI';\r\nimport DetailsCard from './components/DetailsCard';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Route path=\"/\" exact component={UsersManagmentUI} />\r\n        <Route path=\"/details/:id\" component={DetailsCard} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initialState = {\r\n  users: [\r\n    {\r\n      id: 1,\r\n      name: 'John Doe',\r\n      grade: 1,\r\n      school: 'MIT',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Niel Tyson',\r\n      grade: 2,\r\n      school: 'NASA University',\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Terry Adams',\r\n      grade: 3,\r\n      school: 'Hogvarts',\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Jenny Smith',\r\n      grade: 4,\r\n      school: 'Sakuraso Art School',\r\n    },\r\n  ],\r\n};\r\n\r\nconst allReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_USER': {\r\n      const newBlankUser = action.payload;\r\n      return {\r\n        users: [...state.users, newBlankUser],\r\n      };\r\n    }\r\n\r\n    case 'DELETE_USER': {\r\n      const filteredUserList = state.users.filter(x => x.id !== action.payload);\r\n      return { ...state, users: filteredUserList };\r\n    }\r\n\r\n    case 'UPDATE_USER': {\r\n      console.log('payload', action.payload);\r\n      const upadtedList = state.users.map(user => {\r\n        const { id, name, grade, school } = action.payload;\r\n        if (user.id === id) {\r\n          user.name = name;\r\n          user.grade = grade;\r\n          user.school = school;\r\n        }\r\n        return user;\r\n      });\r\n      return { users: upadtedList };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default allReducers;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport allReducers from './redux/reducers';\r\n\r\nconst store = createStore(\r\n  allReducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nconst history = createBrowserHistory({\r\n  basename: process.env.PUBLIC_URL,\r\n});\r\n\r\nReactDOM.render(\r\n  <Router history={history}>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}